{"ast":null,"code":"import _objectSpread from \"/home/ashar/Projects/Noon/Playground/codesandbox/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/ashar/Projects/Noon/Playground/codesandbox/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport loader from '@monaco-editor/loader';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MonacoContainer from '../MonacoContainer/index.js';\nimport useMount from '../hooks/useMount/index.js';\nimport useUpdate from '../hooks/useUpdate/index.js';\nimport { getOrCreateModel, noop } from '../utils/index.js';\nfunction DiffEditor(_ref) {\n  var original = _ref.original,\n    modified = _ref.modified,\n    language = _ref.language,\n    originalLanguage = _ref.originalLanguage,\n    modifiedLanguage = _ref.modifiedLanguage,\n    originalModelPath = _ref.originalModelPath,\n    modifiedModelPath = _ref.modifiedModelPath,\n    keepCurrentOriginalModel = _ref.keepCurrentOriginalModel,\n    keepCurrentModifiedModel = _ref.keepCurrentModifiedModel,\n    theme = _ref.theme,\n    loading = _ref.loading,\n    options = _ref.options,\n    height = _ref.height,\n    width = _ref.width,\n    className = _ref.className,\n    wrapperProps = _ref.wrapperProps,\n    beforeMount = _ref.beforeMount,\n    onMount = _ref.onMount;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditorReady = _useState2[0],\n    setIsEditorReady = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isMonacoMounting = _useState4[0],\n    setIsMonacoMounting = _useState4[1];\n  var editorRef = useRef(null);\n  var monacoRef = useRef(null);\n  var containerRef = useRef(null);\n  var onMountRef = useRef(onMount);\n  var beforeMountRef = useRef(beforeMount);\n  useMount(function () {\n    var cancelable = loader.init();\n    cancelable.then(function (monaco) {\n      return (monacoRef.current = monaco) && setIsMonacoMounting(false);\n    }).catch(function (error) {\n      return (error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error);\n    });\n    return function () {\n      return editorRef.current ? disposeEditor() : cancelable.cancel();\n    };\n  });\n  useUpdate(function () {\n    var modifiedEditor = editorRef.current.getModifiedEditor();\n    if (modifiedEditor.getOption(monacoRef.current.editor.EditorOption.readOnly)) {\n      modifiedEditor.setValue(modified);\n    } else {\n      if (modified !== modifiedEditor.getValue()) {\n        modifiedEditor.executeEdits('', [{\n          range: modifiedEditor.getModel().getFullModelRange(),\n          text: modified,\n          forceMoveMarkers: true\n        }]);\n        modifiedEditor.pushUndoStop();\n      }\n    }\n  }, [modified], isEditorReady);\n  useUpdate(function () {\n    editorRef.current.getModel().original.setValue(original);\n  }, [original], isEditorReady);\n  useUpdate(function () {\n    var _editorRef$current$ge = editorRef.current.getModel(),\n      original = _editorRef$current$ge.original,\n      modified = _editorRef$current$ge.modified;\n    monacoRef.current.editor.setModelLanguage(original, originalLanguage || language);\n    monacoRef.current.editor.setModelLanguage(modified, modifiedLanguage || language);\n  }, [language, originalLanguage, modifiedLanguage], isEditorReady);\n  useUpdate(function () {\n    monacoRef.current.editor.setTheme(theme);\n  }, [theme], isEditorReady);\n  useUpdate(function () {\n    editorRef.current.updateOptions(options);\n  }, [options], isEditorReady);\n  var setModels = useCallback(function () {\n    beforeMountRef.current(monacoRef.current);\n    var originalModel = getOrCreateModel(monacoRef.current, original, originalLanguage || language, originalModelPath);\n    var modifiedModel = getOrCreateModel(monacoRef.current, modified, modifiedLanguage || language, modifiedModelPath);\n    editorRef.current.setModel({\n      original: originalModel,\n      modified: modifiedModel\n    });\n  }, [language, modified, modifiedLanguage, original, originalLanguage, originalModelPath, modifiedModelPath]);\n  var createEditor = useCallback(function () {\n    editorRef.current = monacoRef.current.editor.createDiffEditor(containerRef.current, _objectSpread({\n      automaticLayout: true\n    }, options));\n    setModels();\n    monacoRef.current.editor.setTheme(theme);\n    setIsEditorReady(true);\n  }, [options, theme, setModels]);\n  useEffect(function () {\n    if (isEditorReady) {\n      onMountRef.current(editorRef.current, monacoRef.current);\n    }\n  }, [isEditorReady]);\n  useEffect(function () {\n    !isMonacoMounting && !isEditorReady && createEditor();\n  }, [isMonacoMounting, isEditorReady, createEditor]);\n  function disposeEditor() {\n    var models = editorRef.current.getModel();\n    if (!keepCurrentOriginalModel) {\n      var _models$original;\n      (_models$original = models.original) === null || _models$original === void 0 ? void 0 : _models$original.dispose();\n    }\n    if (!keepCurrentModifiedModel) {\n      var _models$modified;\n      (_models$modified = models.modified) === null || _models$modified === void 0 ? void 0 : _models$modified.dispose();\n    }\n    editorRef.current.dispose();\n  }\n  return /*#__PURE__*/React.createElement(MonacoContainer, {\n    width: width,\n    height: height,\n    isEditorReady: isEditorReady,\n    loading: loading,\n    _ref: containerRef,\n    className: className,\n    wrapperProps: wrapperProps\n  });\n}\nDiffEditor.propTypes = {\n  original: PropTypes.string,\n  modified: PropTypes.string,\n  language: PropTypes.string,\n  originalLanguage: PropTypes.string,\n  modifiedLanguage: PropTypes.string,\n  /* === */\n  originalModelPath: PropTypes.string,\n  modifiedModelPath: PropTypes.string,\n  keepCurrentOriginalModel: PropTypes.bool,\n  keepCurrentModifiedModel: PropTypes.bool,\n  theme: PropTypes.string,\n  loading: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  options: PropTypes.object,\n  /* === */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  className: PropTypes.string,\n  wrapperProps: PropTypes.object,\n  /* === */\n  beforeMount: PropTypes.func,\n  onMount: PropTypes.func\n};\nDiffEditor.defaultProps = {\n  theme: 'light',\n  loading: 'Loading...',\n  options: {},\n  keepCurrentOriginalModel: false,\n  keepCurrentModifiedModel: false,\n  /* === */\n  width: '100%',\n  height: '100%',\n  wrapperProps: {},\n  /* === */\n  beforeMount: noop,\n  onMount: noop\n};\nexport default DiffEditor;","map":null,"metadata":{},"sourceType":"module"}